name: Provision Infra and Run Tests

on:
  push:
    branches: [main]

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure SSH key exists for Terraform
        run: |
          if [ ! -f terraform/id_rsa.pub ]; then
            ssh-keygen -t rsa -b 2048 -f terraform/id_rsa -N ""
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init and Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Output VM IPs
        id: tf_outputs
        run: |
          cd terraform
          echo "linux_ip=$(terraform output -raw linux_ip)" >> $GITHUB_OUTPUT
          echo "windows_ip=$(terraform output -raw windows_ip)" >> $GITHUB_OUTPUT

      - name: Upload SSH key for later jobs
        uses: actions/upload-artifact@v4
        with:
          name: linux_ssh_key
          path: terraform/id_rsa

  wait_for_ready:
    needs: provision
    runs-on: ubuntu-latest
    steps:
      - name: Download SSH key
        uses: actions/download-artifact@v4
        with:
          name: linux_ssh_key

      - name: Wait for Linux SSH
        run: |
          chmod 600 id_rsa
          until ssh -o StrictHostKeyChecking=no -i id_rsa ubuntu@${{ needs.provision.outputs.linux_ip }} "echo ready"; do
            echo "Waiting for Linux SSH..."; sleep 10;
          done

      - name: Wait for Windows RDP/SMB
        run: |
          until nc -z -v ${{ needs.provision.outputs.windows_ip }} 445; do
            echo "Waiting for SMB..."; sleep 10;
          done

  run_tests:
    needs: [wait_for_ready, provision]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download SSH key
        uses: actions/download-artifact@v4
        with:
          name: linux_ssh_key

      - name: Test SSH to Linux
        working-directory: ${{ github.workspace }}
        run: bash scripts/test_ssh.sh ${{ needs.provision.outputs.linux_ip }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Test SMB to Windows
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: scripts/test_smb.ps1 -TargetIP ${{ needs.provision.outputs.windows_ip }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run tests
        working-directory: ${{ github.workspace }}
        env:
          PYTHONPATH: ${{ github.workspace }}
          TEST_LINUX_HOST: ${{ secrets.TEST_LINUX_HOST }}
          TEST_LINUX_USER: ${{ secrets.TEST_LINUX_USER }}
          TEST_LINUX_PASS: ${{ secrets.TEST_LINUX_PASS }}
          TEST_LINUX_PORT: ${{ secrets.TEST_LINUX_PORT }}
          TEST_WINDOWS_HOST: ${{ secrets.TEST_WINDOWS_HOST }}
          TEST_WINDOWS_USER: ${{ secrets.TEST_WINDOWS_USER }}
          TEST_WINDOWS_PASS: ${{ secrets.TEST_WINDOWS_PASS }}
          TEST_WINDOWS_PORT: ${{ secrets.TEST_WINDOWS_PORT }}
        run: pytest tests/test_integration_real_servers.py

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs/

  cleanup:
    needs: run_tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Destroy Infra
        run: |
          cd terraform
          terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
