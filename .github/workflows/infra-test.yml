name: Provision Infra and Run Tests

on:
  push:
    branches: [main]

jobs:
  provision:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure SSH key exists for Terraform
        run: |
          if [ ! -f terraform/id_rsa.pub ]; then
            ssh-keygen -t rsa -b 2048 -f terraform/id_rsa -N ""
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Validate AWS Credentials
        run: |
          echo "Validating AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials are valid!"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Remove existing AWS key pair if present
        run: |
          aws ec2 delete-key-pair --key-name hai-ci-key || true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1

      - name: Terraform Init and Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve -var="windows_password=${{ secrets.TEST_WINDOWS_PASS }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Output VM IPs
        id: tf_outputs
        run: |
          cd terraform
          echo "linux_ip=$(terraform output -raw linux_ip)" >> $GITHUB_OUTPUT
          echo "windows_ip=$(terraform output -raw windows_ip)" >> $GITHUB_OUTPUT
          echo "Linux instance created with IP: $(terraform output -raw linux_ip)"
          echo "Windows instance created with IP: $(terraform output -raw windows_ip)"

      - name: Upload SSH key for later jobs
        uses: actions/upload-artifact@v4
        with:
          name: linux_ssh_key
          path: terraform/id_rsa

    outputs:
      linux_ip: ${{ steps.tf_outputs.outputs.linux_ip }}
      windows_ip: ${{ steps.tf_outputs.outputs.windows_ip }}

  wait_for_ready:
    needs: provision
    runs-on: ubuntu-latest
    steps:
      - name: Download SSH key
        uses: actions/download-artifact@v4
        with:
          name: linux_ssh_key

      - name: Wait for Linux SSH
        run: |
          chmod 600 id_rsa
          for i in {1..3}; do
            if ssh -o StrictHostKeyChecking=no -i id_rsa ubuntu@${{ needs.provision.outputs.linux_ip }} "echo ready"; then
              echo "Linux SSH is ready!"; exit 0;
            fi
            echo "Waiting for Linux SSH..."; sleep 10;
          done
          echo "ERROR: Linux SSH not reachable after 30 seconds."; exit 1

      - name: Wait for Windows RDP/SMB
        run: |
          for i in {1..3}; do
            if nc -z -v ${{ needs.provision.outputs.windows_ip }} 445; then
              echo "Windows SMB is ready!"; exit 0;
            fi
            echo "Waiting for SMB..."; sleep 10;
          done
          echo "ERROR: Windows SMB not reachable after 30 seconds."; exit 1

  run_tests:
    needs: [wait_for_ready, provision]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download SSH key
        uses: actions/download-artifact@v4
        with:
          name: linux_ssh_key

      - name: Set SSH key permissions
        run: |
          chmod 600 id_rsa
          echo "SSH key permissions set"

      - name: Test SSH to Linux
        working-directory: ${{ github.workspace }}
        run: bash tests/test_linux_ssh_connectivity.sh ${{ needs.provision.outputs.linux_ip }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Test SMB to Windows
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: tests/test_windows_smb_connectivity.ps1 -TargetIP ${{ needs.provision.outputs.windows_ip }}
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run tests
        working-directory: ${{ github.workspace }}
        env:
          # Linux host IP comes from Terraform outputs, not secrets
          TEST_LINUX_HOST: ${{ needs.provision.outputs.linux_ip }}
          TEST_LINUX_USER: ubuntu
          TEST_LINUX_SSH_KEY: ${{ github.workspace }}/id_rsa
          # Windows credentials still need secrets
          TEST_WINDOWS_HOST: ${{ needs.provision.outputs.windows_ip }}
          TEST_WINDOWS_USER: Administrator
          TEST_WINDOWS_PASS: ${{ secrets.TEST_WINDOWS_PASS }}
        run: |
          # Debug information before installation
          echo "=== PRE-INSTALLATION DEBUG ==="
          echo "PYTHONPATH=$PYTHONPATH"
          echo "Current directory: $(pwd)"
          echo "Files in current directory: $(ls -la)"
          echo "Files in core directory: $(ls -la core/)"
          echo "SSH key exists: $(ls -la id_rsa)"
          echo "Python path: $(python -c 'import sys; print("\\n".join(sys.path))')"
          
          # Install dependencies first
          echo "=== INSTALLING DEPENDENCIES ==="
          pip install paramiko>=2.7.0 impacket>=0.9.0 pytest>=6.0.0 pyyaml>=5.0 cryptography>=3.0 bcrypt>=3.0 pynacl>=1.0
          
          # Try multiple installation methods
          echo "=== INSTALLING PACKAGE ==="
          
          # Method 1: Install in development mode
          pip install -e . || echo "pip install -e . failed"
          
          # Method 2: Add current directory to PYTHONPATH
          export PYTHONPATH="${GITHUB_WORKSPACE}:${PYTHONPATH:-}"
          
          # Method 3: Try installing with pip install .
          pip install . || echo "pip install . failed"
          
          echo "=== POST-INSTALLATION DEBUG ==="
          echo "PYTHONPATH=$PYTHONPATH"
          echo "Python path: $(python -c 'import sys; print("\\n".join(sys.path))')"
          
          # Test imports
          echo "=== TESTING IMPORTS ==="
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import core; print('Core module imported successfully')" || echo "Core import failed"
          python -c "from core.connection_manager import connect_with_fallback; print('connection_manager imported successfully')" || echo "connection_manager import failed"
          
          # List installed packages
          echo "=== INSTALLED PACKAGES ==="
          pip list | grep -E "(hai|core)" || echo "No hai or core packages found"
          
          # Run tests with verbose output
          echo "=== RUNNING TESTS ==="
          python -m pytest tests/test_integration_real_servers.py -v --tb=short

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: logs/

  cleanup:
    needs: run_tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Destroy Infra
        run: |
          cd terraform
          terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
