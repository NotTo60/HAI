name: Test Virtual Network Services

on:
  workflow_call:
    inputs:
      linux_ip:
        required: true
        type: string
      windows_ip:
        required: true
        type: string
      detected_username:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  test-vns:
    name: Test Virtual Network Services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download SSH keys
        uses: actions/download-artifact@v4
        with:
          name: ssh_keys

      - name: Set SSH key permissions
        run: |
          chmod 600 ec2_user_rsa
          chmod 600 windows_rsa
          echo "SSH key permissions set"

      - name: Debug Windows administrator password
        run: |
          echo "=== DEBUG WINDOWS ADMINISTRATOR PASSWORD ==="
          
          # Get the Windows instance ID
          WINDOWS_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=hai-windows-ci" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$WINDOWS_INSTANCE_ID" ]; then
            echo "Found Windows instance: $WINDOWS_INSTANCE_ID"
            
            # Try to retrieve password data with retries
            echo "Waiting for password data to become available..."
            PASSWORD_DATA=""
            MAX_ATTEMPTS=5
            ATTEMPT=1
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ -z "$PASSWORD_DATA" ]; do
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Retrieving encrypted password data..."
              PASSWORD_DATA=$(aws ec2 get-password-data \
                --instance-id $WINDOWS_INSTANCE_ID \
                --query 'PasswordData' \
                --output text 2>/dev/null || echo "")
              
              if [ -n "$PASSWORD_DATA" ] && [ "$PASSWORD_DATA" != "None" ]; then
                echo "✅ Encrypted password data retrieved successfully on attempt $ATTEMPT"
                break
              else
                echo "❌ No password data available yet (attempt $ATTEMPT/$MAX_ATTEMPTS)"
                if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                  echo "Waiting 30 seconds before next attempt..."
                  sleep 30
                fi
              fi
              ATTEMPT=$((ATTEMPT + 1))
            done
            
            if [ -n "$PASSWORD_DATA" ] && [ "$PASSWORD_DATA" != "None" ]; then
              # Decrypt the password using the private key
              echo "Decrypting password using private key..."
              DECRYPTED_PASSWORD=$(echo "$PASSWORD_DATA" | base64 -d | openssl rsautl -decrypt -inkey windows_rsa 2>/dev/null || echo "DECRYPTION_FAILED")
              
              if [ "$DECRYPTED_PASSWORD" != "DECRYPTION_FAILED" ]; then
                echo "✅ WINDOWS ADMINISTRATOR PASSWORD: $DECRYPTED_PASSWORD"
                echo "Instance ID: $WINDOWS_INSTANCE_ID"
                echo "IP Address: ${{ inputs.windows_ip }}"
              else
                echo "❌ Failed to decrypt password"
              fi
            else
              echo "❌ Password data still not available after $MAX_ATTEMPTS attempts."
              echo "   This might indicate an issue with the Windows instance setup."
            fi
          else
            echo "❌ Windows instance not found or not running"
          fi
          
          echo "=== END PASSWORD DEBUG ==="

      - name: Test SSH to Linux
        working-directory: ${{ github.workspace }}
        run: bash tests/test_linux_ssh_connectivity.sh ${{ inputs.linux_ip }} ${{ inputs.detected_username }}

      - name: Test SMB to Windows
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: tests/test_windows_smb_connectivity.ps1 -TargetIP ${{ inputs.windows_ip }}

      - name: Test SMB to Windows (Bash fallback)
        if: failure()
        working-directory: ${{ github.workspace }}
        run: tests/test_windows_smb_connectivity.sh ${{ inputs.windows_ip }}

      - name: Test RDP connectivity
        run: |
          echo "=== TESTING RDP CONNECTIVITY ==="
          echo "Windows IP: ${{ inputs.windows_ip }}"
          echo "Testing RDP port 3389..."
          
          # Test if RDP port is open
          if nc -z -w5 ${{ inputs.windows_ip }} 3389; then
            echo "✅ RDP port 3389 is open and accessible"
          else
            echo "❌ RDP port 3389 is not accessible"
          fi
          
          echo "RDP connection command (for manual testing):"
          echo "xfreerdp /v:${{ inputs.windows_ip }} /u:Administrator /p:\"<password_from_above>\" /cert:ignore"
          echo "=== END RDP TEST ===" 