name: Test Virtual Network Services

on:
  workflow_call:
    inputs:
      linux_ip:
        required: true
        type: string
      windows_ip:
        required: true
        type: string
      detected_username:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  test-vns:
    name: Test Virtual Network Services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download SSH keys
        uses: actions/download-artifact@v4
        with:
          name: ssh_keys

      - name: Set SSH key permissions
        run: |
          chmod 600 ec2_user_rsa
          chmod 600 windows_rsa
          echo "SSH key permissions set"

      - name: Debug Windows administrator password
        run: |
          echo "=== DEBUG WINDOWS ADMINISTRATOR PASSWORD ==="
          
          # Get the Windows instance ID and debug info
          WINDOWS_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=hai-windows-ci" "Name=tag:WorkflowRunID,Values=${{ github.run_id }}" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text 2>/dev/null || echo "")
          if [ -n "$WINDOWS_INSTANCE_ID" ]; then
            echo "Found Windows instance: $WINDOWS_INSTANCE_ID"
            # Print instance launch time and key pair name
            INSTANCE_LAUNCH_TIME=$(aws ec2 describe-instances --instance-ids $WINDOWS_INSTANCE_ID --query 'Reservations[0].Instances[0].LaunchTime' --output text)
            INSTANCE_KEY_NAME=$(aws ec2 describe-instances --instance-ids $WINDOWS_INSTANCE_ID --query 'Reservations[0].Instances[0].KeyName' --output text)
            echo "Instance Launch Time: $INSTANCE_LAUNCH_TIME"
            echo "Instance Key Pair Name: $INSTANCE_KEY_NAME"
            # Print current UTC time for comparison
            echo "Current UTC Time: $(date -u)"
            # Print private key fingerprint
            echo "Private key fingerprint (windows_rsa):"
            ssh-keygen -lf windows_rsa || echo "(ssh-keygen not available or key missing)"
            # Print first and last lines of key for sanity check
            echo "Key file first line: $(head -1 windows_rsa)"
            echo "Key file last line: $(tail -1 windows_rsa)"
            # Check if instance is new (launched within last 30 minutes)
            LAUNCH_EPOCH=$(date -d "$INSTANCE_LAUNCH_TIME" +%s)
            NOW_EPOCH=$(date -u +%s)
            AGE_MINUTES=$(( (NOW_EPOCH - LAUNCH_EPOCH) / 60 ))
            echo "Instance age (minutes): $AGE_MINUTES"
            if [ $AGE_MINUTES -gt 30 ]; then
              echo "❌ Instance is older than 30 minutes. Please ensure a fresh VM is used."
              exit 1
            fi
            # Check key pair name matches expected
            if [ "$INSTANCE_KEY_NAME" != "hai-ci-windows-key" ]; then
              echo "❌ Instance key pair name does not match expected (hai-ci-windows-key)"
              exit 1
            fi
            
            # Try to retrieve password data with retries
            echo "Waiting for password data to become available..."
            PASSWORD_DATA=""
            MAX_ATTEMPTS=10
            ATTEMPT=1
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ -z "$PASSWORD_DATA" ]; do
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Retrieving encrypted password data..."
              PASSWORD_DATA=$(aws ec2 get-password-data \
                --instance-id $WINDOWS_INSTANCE_ID \
                --query 'PasswordData' \
                --output text 2>/dev/null || echo "")
              
              if [ -n "$PASSWORD_DATA" ] && [ "$PASSWORD_DATA" != "None" ]; then
                echo "✅ Encrypted password data retrieved successfully on attempt $ATTEMPT"
                break
              else
                echo "❌ No password data available yet (attempt $ATTEMPT/$MAX_ATTEMPTS)"
                if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                  echo "Waiting 30 seconds before next attempt..."
                  sleep 30
                fi
              fi
              ATTEMPT=$((ATTEMPT + 1))
            done
            
            if [ -n "$PASSWORD_DATA" ] && [ "$PASSWORD_DATA" != "None" ]; then
              # Decrypt the password using the private key
              echo "Decrypting password using private key..."
              # First, ensure the key is in the correct format for OpenSSL
              echo "Converting key format for OpenSSL compatibility..."
              openssl rsa -in windows_rsa -out windows_rsa_openssl -outform PEM 2>/dev/null || echo "Key conversion failed"
              # Try decryption with the converted key
              WIN_AUTH_DATA=$(echo "$PASSWORD_DATA" | base64 -d | openssl rsautl -decrypt -inkey windows_rsa_openssl 2>/dev/null || echo "DECRYPTION_FAILED")
              # If that fails, try with the original key
              if [ "$WIN_AUTH_DATA" = "DECRYPTION_FAILED" ]; then
                echo "Trying with original key format..."
                WIN_AUTH_DATA=$(echo "$PASSWORD_DATA" | base64 -d | openssl rsautl -decrypt -inkey windows_rsa 2>/dev/null || echo "DECRYPTION_FAILED")
              fi
              
              if [ "$WIN_AUTH_DATA" != "DECRYPTION_FAILED" ]; then
                echo "✅ WINDOWS ADMINISTRATOR PASSWORD: $WIN_AUTH_DATA"
                echo "Instance ID: $WINDOWS_INSTANCE_ID"
                echo "IP Address: ${{ inputs.windows_ip }}"
                
                # Password validity checks (length, complexity, whitespace, printable)
                if [[ "$WIN_AUTH_DATA" =~ [^[:print:]] || ${#WIN_AUTH_DATA} -lt 12 ]]; then
                  echo "❌ Decrypted password is not valid (non-printable or too short)"
                  exit 1
                fi
                if ! [[ "$WIN_AUTH_DATA" =~ [A-Z] ]]; then
                  echo "❌ Password does not contain an uppercase letter"; exit 1; fi
                if ! [[ "$WIN_AUTH_DATA" =~ [a-z] ]]; then
                  echo "❌ Password does not contain a lowercase letter"; exit 1; fi
                if ! [[ "$WIN_AUTH_DATA" =~ [0-9] ]]; then
                  echo "❌ Password does not contain a digit"; exit 1; fi
                if ! [[ "$WIN_AUTH_DATA" =~ [^a-zA-Z0-9] ]]; then
                  echo "❌ Password does not contain a special character"; exit 1; fi
                if [[ "$WIN_AUTH_DATA" =~ [[:space:]] ]]; then
                  echo "❌ Password contains whitespace"; exit 1; fi
                echo "✅ Password format looks valid"

                # Store password for use in RDP and SMB tests
                echo "$WIN_AUTH_DATA" > temp_auth.txt  # pragma: allowlist secret
                echo "Password saved to temp_auth.txt for authentication tests"
              else
                echo "❌ Failed to decrypt password. This might be because:"
                echo "   - Private key doesn't match the one used to encrypt the password"
                echo "   - Password data format is different than expected"
                echo "DECRYPTION_FAILED" > temp_auth.txt
              fi
            else
              echo "❌ Password data still not available after $MAX_ATTEMPTS attempts."
              echo "   This might indicate an issue with the Windows instance setup."
              echo "NO_PASSWORD_AVAILABLE" > temp_auth.txt
            fi
          else
            echo "❌ Windows instance not found or not running"
            echo "NO_INSTANCE_FOUND" > temp_auth.txt
          fi
          
          echo "=== END PASSWORD RETRIEVAL ==="

      - name: Test SSH to Linux
        working-directory: ${{ github.workspace }}
        run: bash tests/test_linux_ssh_connectivity.sh ${{ inputs.linux_ip }} ${{ inputs.detected_username }}

      - name: Test RDP connectivity
        run: |
          echo "=== TESTING RDP CONNECTIVITY ==="
          echo "Windows IP: ${{ inputs.windows_ip }}"
          echo "Testing RDP port 3389..."
          
          # Test if RDP port is open
          if nc -z -w5 ${{ inputs.windows_ip }} 3389; then
            echo "✅ RDP port 3389 is open and accessible"
          else
            echo "❌ RDP port 3389 is not accessible"
            exit 1
          fi

          # Install xfreerdp if not present
          if ! command -v xfreerdp >/dev/null 2>&1; then
            echo "Installing xfreerdp..."
            sudo apt-get update -qq && sudo apt-get install -y freerdp2-x11
          fi

          # Load password for RDP authentication test
          if [ -f temp_auth.txt ]; then
            WIN_AUTH_DATA=$(cat temp_auth.txt)
            if [ "$WIN_AUTH_DATA" != "DECRYPTION_FAILED" ] && [ "$WIN_AUTH_DATA" != "NO_PASSWORD_AVAILABLE" ] && [ "$WIN_AUTH_DATA" != "NO_INSTANCE_FOUND" ]; then
              echo "Testing RDP authentication with xfreerdp (+auth-only)..."
              xfreerdp /v:${{ inputs.windows_ip }} /u:Administrator /p:"$WIN_AUTH_DATA" /cert:ignore /sec:nla +auth-only
              RDP_RESULT=$?
              if [ $RDP_RESULT -eq 0 ]; then
                echo "✅ RDP authentication succeeded with decrypted password"
              else
                echo "❌ RDP authentication failed with decrypted password"
                exit 1
              fi
            else
              echo "No valid password available for RDP authentication test"
              exit 1
            fi
          else
            echo "Password file not found for RDP authentication test"
            exit 1
          fi

          echo "RDP connection command (for manual testing):"
          echo "xfreerdp /v:${{ inputs.windows_ip }} /u:Administrator /p:\"<password_from_above>\" /cert:ignore"
          echo "=== END RDP TEST ==="

      - name: Test SMB to Windows (cross-platform)
        working-directory: ${{ github.workspace }}
        run: |
          echo "Testing SMB connectivity to Windows instance..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            if [ -f temp_auth.txt ]; then
              WINDOWS_PASSWORD=$(cat temp_auth.txt)
              if [ "$WINDOWS_PASSWORD" != "DECRYPTION_FAILED" ] && [ "$WINDOWS_PASSWORD" != "NO_PASSWORD_AVAILABLE" ] && [ "$WINDOWS_PASSWORD" != "NO_INSTANCE_FOUND" ]; then
                echo "Using retrieved Windows administrator password for SMB authentication"
                pwsh tests/test_windows_smb_connectivity.ps1 -TargetIP ${{ inputs.windows_ip }} -Password "$WINDOWS_PASSWORD"
              else
                echo "No valid password available, testing with anonymous access"
                pwsh tests/test_windows_smb_connectivity.ps1 -TargetIP ${{ inputs.windows_ip }}
              fi
            else
              echo "Password file not found, testing with anonymous access"
              pwsh tests/test_windows_smb_connectivity.ps1 -TargetIP ${{ inputs.windows_ip }}
            fi
          else
            if [ -f temp_auth.txt ]; then
              WINDOWS_PASSWORD=$(cat temp_auth.txt)
              if [ "$WINDOWS_PASSWORD" != "DECRYPTION_FAILED" ] && [ "$WINDOWS_PASSWORD" != "NO_PASSWORD_AVAILABLE" ] && [ "$WINDOWS_PASSWORD" != "NO_INSTANCE_FOUND" ]; then
                echo "Using retrieved Windows administrator password for SMB authentication"
                bash tests/test_windows_smb_connectivity.sh ${{ inputs.windows_ip }} "$WINDOWS_PASSWORD"
              else
                echo "No valid password available, testing with anonymous access"
                bash tests/test_windows_smb_connectivity.sh ${{ inputs.windows_ip }}
              fi
            else
              echo "Password file not found, testing with anonymous access"
              bash tests/test_windows_smb_connectivity.sh ${{ inputs.windows_ip }}
            fi
          fi
        shell: bash 