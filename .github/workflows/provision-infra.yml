name: Provision Infrastructure

on:
  workflow_call:
    outputs:
      linux_ip:
        description: "Linux instance IP address"
        value: ${{ jobs.provision-infra.outputs.linux_ip }}
      windows_ip:
        description: "Windows instance IP address"
        value: ${{ jobs.provision-infra.outputs.windows_ip }}
      detected_username:
        description: "Detected Linux username"
        value: ${{ jobs.provision-infra.outputs.detected_username }}
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  provision-infra:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    outputs:
      linux_ip: ${{ steps.tf_outputs.outputs.linux_ip }}
      windows_ip: ${{ steps.tf_outputs.outputs.windows_ip }}
      detected_username: ${{ steps.detect_username.outputs.username }}
    steps:
      - uses: actions/checkout@v4

      - name: Debug secrets availability
        run: |
          echo "=== SECRETS DEBUG ==="
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "✅ AWS_ACCESS_KEY_ID is available (length: ${#AWS_ACCESS_KEY_ID})"
          else
            echo "❌ AWS_ACCESS_KEY_ID is NOT available"
          fi
          
          if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "✅ AWS_SECRET_ACCESS_KEY is available (length: ${#AWS_SECRET_ACCESS_KEY})"
          else
            echo "❌ AWS_SECRET_ACCESS_KEY is NOT available"
          fi
          echo "=== END SECRETS DEBUG ==="

      - name: Ensure SSH key exists for Terraform
        run: |
          if [ ! -f terraform/id_rsa.pub ]; then
            ssh-keygen -t rsa -b 2048 -f terraform/id_rsa -N ""
          fi

      - name: Generate SSH keys for instances
        run: |
          # Generate a new SSH key pair for Linux instances
          ssh-keygen -t rsa -b 2048 -f terraform/ec2_user_rsa -N ""
          echo "Generated new SSH key pair for Linux instances"
          echo "Linux Public key:"
          cat terraform/ec2_user_rsa.pub
          
          # Generate a separate SSH key pair for Windows instances (PEM format for AWS password retrieval)
          ssh-keygen -t rsa -b 2048 -m PEM -f terraform/windows_rsa -N ""
          echo "Generated new SSH key pair for Windows instances (PEM format)"
          echo "Windows Public key:"
          cat terraform/windows_rsa.pub

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Verify Terraform Installation
        run: |
          echo "=== TERRAFORM INSTALLATION VERIFICATION ==="
          echo "Terraform version:"
          terraform version
          echo "Terraform location:"
          which terraform
          echo "PATH:"
          echo $PATH
          echo "=== END VERIFICATION ==="

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Validate AWS Credentials
        run: |
          echo "Validating AWS credentials..."
          aws sts get-caller-identity
          echo "AWS credentials are valid!"

      - name: Remove existing AWS key pairs if present
        run: |
          aws ec2 delete-key-pair --key-name hai-ci-ec2-user-key || true
          aws ec2 delete-key-pair --key-name hai-ci-windows-key || true

      - name: Clean up conflicting subnets
        run: |
          echo "Checking for existing subnets that might conflict..."
          # Get VPC ID
          VPC_ID=$(aws ec2 describe-vpcs --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "")
          if [ ! -z "$VPC_ID" ]; then
            echo "Found VPC: $VPC_ID"
            # List subnets in the VPC that might conflict with our new CIDR
            SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[?CidrBlock==`10.0.200.0/24`].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$SUBNETS" ]; then
              echo "Found conflicting subnet(s): $SUBNETS"
              echo "Deleting conflicting subnets..."
              for SUBNET in $SUBNETS; do
                aws ec2 delete-subnet --subnet-id $SUBNET || echo "Failed to delete subnet $SUBNET"
              done
            else
              echo "No conflicting subnets found with CIDR 10.0.200.0/24"
            fi
            
            # Also check for any subnets in the 10.0.x.x range that might overlap
            echo "Checking for any subnets in 10.0.x.x range..."
            ALL_SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[?starts_with(CidrBlock, `10.0.`)].{SubnetId:SubnetId,CidrBlock:CidrBlock}' --output json 2>/dev/null || echo "[]")
            echo "Existing subnets in 10.0.x.x range: $ALL_SUBNETS"
            
            # If there are any subnets in the 10.0.x.x range, delete them all to avoid conflicts
            SUBNET_IDS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[?starts_with(CidrBlock, `10.0.`)].SubnetId' --output text 2>/dev/null || echo "")
            if [ ! -z "$SUBNET_IDS" ]; then
              echo "Found existing subnets in 10.0.x.x range, deleting all to avoid conflicts: $SUBNET_IDS"
              for SUBNET_ID in $SUBNET_IDS; do
                echo "Deleting subnet: $SUBNET_ID"
                aws ec2 delete-subnet --subnet-id $SUBNET_ID || echo "Failed to delete subnet $SUBNET_ID"
              done
            fi
          else
            echo "No VPC found"
          fi

      - name: Terraform Init and Apply
        run: |
          echo "=== TERRAFORM EXECUTION DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Terraform directory contents:"
          ls -la terraform/
          echo "Terraform executable:"
          which terraform
          echo "Terraform version:"
          terraform version
          echo "=== STARTING TERRAFORM ==="
          cd terraform
          echo "Changed to terraform directory: $(pwd)"
          terraform init
          terraform apply -auto-approve -var="workflow_run_id=${{ github.run_id }}"

      - name: Output VM IPs
        id: tf_outputs
        run: |
          echo "=== TERRAFORM OUTPUT DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Terraform executable:"
          which terraform
          echo "Terraform version:"
          terraform version
          echo "=== GETTING TERRAFORM OUTPUTS ==="
          cd terraform
          echo "Changed to terraform directory: $(pwd)"
          echo "linux_ip=$(terraform output -raw linux_ip)" >> $GITHUB_OUTPUT
          echo "windows_ip=$(terraform output -raw windows_ip)" >> $GITHUB_OUTPUT
          echo "Linux instance created with IP: $(terraform output -raw linux_ip)"
          echo "Windows instance created with IP: $(terraform output -raw windows_ip)"

      - name: Wait for instances to be ready
        run: |
          echo "Waiting for instances to be ready..."
          sleep 60
          echo "Instances should be ready now"

      - name: Detect Linux username
        id: detect_username
        run: |
          cd terraform
          echo "username=$(terraform output -raw linux_ssh_user)" >> $GITHUB_OUTPUT
          echo "Detected Linux username: $(terraform output -raw linux_ssh_user)"

      - name: Upload SSH keys as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssh_keys
          path: |
            terraform/ec2_user_rsa
            terraform/ec2_user_rsa.pub
            terraform/windows_rsa
            terraform/windows_rsa.pub

      - name: Retrieve Windows administrator password
        run: |
          echo "=== RETRIEVING WINDOWS ADMINISTRATOR PASSWORD ==="
          
          # Get the Windows instance ID
          WINDOWS_INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=hai-windows-ci" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$WINDOWS_INSTANCE_ID" ]; then
            echo "Found Windows instance: $WINDOWS_INSTANCE_ID"
            
            # Set proper permissions for the private key
            chmod 600 terraform/windows_rsa
            
            # Debug: Check key format
            echo "=== KEY DEBUG INFO ==="
            echo "Key file size: $(wc -c < terraform/windows_rsa) bytes"
            echo "Key file first line: $(head -1 terraform/windows_rsa)"
            echo "Key file last line: $(tail -1 terraform/windows_rsa)"
            echo "=== END KEY DEBUG ==="
            
            # Try to retrieve password data with retries
            echo "Waiting for password data to become available..."
            PASSWORD_DATA=""
            MAX_ATTEMPTS=10
            ATTEMPT=1
            
            while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ -z "$PASSWORD_DATA" ]; do
              echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Retrieving encrypted password data..."
              PASSWORD_DATA=$(aws ec2 get-password-data \
                --instance-id $WINDOWS_INSTANCE_ID \
                --query 'PasswordData' \
                --output text 2>/dev/null || echo "")
              
              if [ -n "$PASSWORD_DATA" ] && [ "$PASSWORD_DATA" != "None" ]; then
                echo "✅ Encrypted password data retrieved successfully on attempt $ATTEMPT"
                break
              else
                echo "❌ No password data available yet (attempt $ATTEMPT/$MAX_ATTEMPTS)"
                if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                  echo "Waiting 30 seconds before next attempt..."
                  sleep 30
                fi
              fi
              ATTEMPT=$((ATTEMPT + 1))
            done
            
            if [ -n "$PASSWORD_DATA" ] && [ "$PASSWORD_DATA" != "None" ]; then
              # Decrypt the password using the private key
              echo "Decrypting password using private key..."
              # First, ensure the key is in the correct format for OpenSSL
              echo "Converting key format for OpenSSL compatibility..."
              openssl rsa -in terraform/windows_rsa -out terraform/windows_rsa_openssl -outform PEM 2>/dev/null || echo "Key conversion failed"
              
              # Try decryption with the converted key
              DECRYPTED_PASSWORD=$(echo "$PASSWORD_DATA" | base64 -d | openssl rsautl -decrypt -inkey terraform/windows_rsa_openssl 2>/dev/null || echo "DECRYPTION_FAILED")
              
              # If that fails, try with the original key
              if [ "$DECRYPTED_PASSWORD" = "DECRYPTION_FAILED" ]; then
                echo "Trying with original key format..."
                DECRYPTED_PASSWORD=$(echo "$PASSWORD_DATA" | base64 -d | openssl rsautl -decrypt -inkey terraform/windows_rsa 2>/dev/null || echo "DECRYPTION_FAILED")
              fi
              
              if [ "$DECRYPTED_PASSWORD" != "DECRYPTION_FAILED" ]; then
                echo "✅ WINDOWS ADMINISTRATOR PASSWORD: $DECRYPTED_PASSWORD"
                echo "Instance ID: $WINDOWS_INSTANCE_ID"
                echo "IP Address: $(aws ec2 describe-instances --instance-ids $WINDOWS_INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)"
              else
                echo "❌ Failed to decrypt password. This might be because:"
                echo "   - Private key doesn't match the one used to encrypt the password"
                echo "   - Password data format is different than expected"
              fi
            else
              echo "❌ Password data still not available after $MAX_ATTEMPTS attempts."
              echo "   This might indicate an issue with the Windows instance setup."
              echo "   You can try retrieving the password manually from the AWS console."
            fi
          else
            echo "❌ Windows instance not found or not running"
          fi
          
          echo "=== END PASSWORD RETRIEVAL ===" 